// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: media/torrenti/v1/index_service.proto

package torrentiv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TorrentIndexServiceClient is the client API for TorrentIndexService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TorrentIndexServiceClient interface {
	IndexTorrent(ctx context.Context, in *IndexTorrentRequest, opts ...grpc.CallOption) (*IndexTorrentResponse, error)
	Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error)
}

type torrentIndexServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTorrentIndexServiceClient(cc grpc.ClientConnInterface) TorrentIndexServiceClient {
	return &torrentIndexServiceClient{cc}
}

func (c *torrentIndexServiceClient) IndexTorrent(ctx context.Context, in *IndexTorrentRequest, opts ...grpc.CallOption) (*IndexTorrentResponse, error) {
	out := new(IndexTorrentResponse)
	err := c.cc.Invoke(ctx, "/media.torrenti.v1.TorrentIndexService/IndexTorrent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentIndexServiceClient) Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error) {
	out := new(StatResponse)
	err := c.cc.Invoke(ctx, "/media.torrenti.v1.TorrentIndexService/Stat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TorrentIndexServiceServer is the server API for TorrentIndexService service.
// All implementations must embed UnimplementedTorrentIndexServiceServer
// for forward compatibility
type TorrentIndexServiceServer interface {
	IndexTorrent(context.Context, *IndexTorrentRequest) (*IndexTorrentResponse, error)
	Stat(context.Context, *StatRequest) (*StatResponse, error)
	mustEmbedUnimplementedTorrentIndexServiceServer()
}

// UnimplementedTorrentIndexServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTorrentIndexServiceServer struct{}

func (UnimplementedTorrentIndexServiceServer) IndexTorrent(context.Context, *IndexTorrentRequest) (*IndexTorrentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexTorrent not implemented")
}

func (UnimplementedTorrentIndexServiceServer) Stat(context.Context, *StatRequest) (*StatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedTorrentIndexServiceServer) mustEmbedUnimplementedTorrentIndexServiceServer() {}

// UnsafeTorrentIndexServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TorrentIndexServiceServer will
// result in compilation errors.
type UnsafeTorrentIndexServiceServer interface {
	mustEmbedUnimplementedTorrentIndexServiceServer()
}

func RegisterTorrentIndexServiceServer(s grpc.ServiceRegistrar, srv TorrentIndexServiceServer) {
	s.RegisterService(&TorrentIndexService_ServiceDesc, srv)
}

func _TorrentIndexService_IndexTorrent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexTorrentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentIndexServiceServer).IndexTorrent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.torrenti.v1.TorrentIndexService/IndexTorrent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentIndexServiceServer).IndexTorrent(ctx, req.(*IndexTorrentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TorrentIndexService_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentIndexServiceServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.torrenti.v1.TorrentIndexService/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentIndexServiceServer).Stat(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TorrentIndexService_ServiceDesc is the grpc.ServiceDesc for TorrentIndexService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TorrentIndexService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "media.torrenti.v1.TorrentIndexService",
	HandlerType: (*TorrentIndexServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IndexTorrent",
			Handler:    _TorrentIndexService_IndexTorrent_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _TorrentIndexService_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "media/torrenti/v1/index_service.proto",
}
