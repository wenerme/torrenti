// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: media/web/v1/web_services.proto

package webv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebServiceClient is the client API for WebService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebServiceClient interface {
	ListTorrentRef(ctx context.Context, in *ListTorrentRefRequest, opts ...grpc.CallOption) (*ListTorrentRefResponse, error)
	GetTorrentRef(ctx context.Context, in *GetTorrentRefRequest, opts ...grpc.CallOption) (*GetTorrentRefResponse, error)
	GetTorrentRefData(ctx context.Context, in *GetTorrentRefDataRequest, opts ...grpc.CallOption) (*GetTorrentRefDataResponse, error)
	GetTorrentRefMeta(ctx context.Context, in *GetTorrentRefMetaRequest, opts ...grpc.CallOption) (*GetTorrentRefMetaResponse, error)
	SearchTorrentRef(ctx context.Context, in *SearchTorrentRefRequest, opts ...grpc.CallOption) (*SearchTorrentRefResponse, error)
}

type webServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebServiceClient(cc grpc.ClientConnInterface) WebServiceClient {
	return &webServiceClient{cc}
}

func (c *webServiceClient) ListTorrentRef(ctx context.Context, in *ListTorrentRefRequest, opts ...grpc.CallOption) (*ListTorrentRefResponse, error) {
	out := new(ListTorrentRefResponse)
	err := c.cc.Invoke(ctx, "/media.web.v1.WebService/ListTorrentRef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) GetTorrentRef(ctx context.Context, in *GetTorrentRefRequest, opts ...grpc.CallOption) (*GetTorrentRefResponse, error) {
	out := new(GetTorrentRefResponse)
	err := c.cc.Invoke(ctx, "/media.web.v1.WebService/GetTorrentRef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) GetTorrentRefData(ctx context.Context, in *GetTorrentRefDataRequest, opts ...grpc.CallOption) (*GetTorrentRefDataResponse, error) {
	out := new(GetTorrentRefDataResponse)
	err := c.cc.Invoke(ctx, "/media.web.v1.WebService/GetTorrentRefData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) GetTorrentRefMeta(ctx context.Context, in *GetTorrentRefMetaRequest, opts ...grpc.CallOption) (*GetTorrentRefMetaResponse, error) {
	out := new(GetTorrentRefMetaResponse)
	err := c.cc.Invoke(ctx, "/media.web.v1.WebService/GetTorrentRefMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) SearchTorrentRef(ctx context.Context, in *SearchTorrentRefRequest, opts ...grpc.CallOption) (*SearchTorrentRefResponse, error) {
	out := new(SearchTorrentRefResponse)
	err := c.cc.Invoke(ctx, "/media.web.v1.WebService/SearchTorrentRef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebServiceServer is the server API for WebService service.
// All implementations must embed UnimplementedWebServiceServer
// for forward compatibility
type WebServiceServer interface {
	ListTorrentRef(context.Context, *ListTorrentRefRequest) (*ListTorrentRefResponse, error)
	GetTorrentRef(context.Context, *GetTorrentRefRequest) (*GetTorrentRefResponse, error)
	GetTorrentRefData(context.Context, *GetTorrentRefDataRequest) (*GetTorrentRefDataResponse, error)
	GetTorrentRefMeta(context.Context, *GetTorrentRefMetaRequest) (*GetTorrentRefMetaResponse, error)
	SearchTorrentRef(context.Context, *SearchTorrentRefRequest) (*SearchTorrentRefResponse, error)
	mustEmbedUnimplementedWebServiceServer()
}

// UnimplementedWebServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWebServiceServer struct{}

func (UnimplementedWebServiceServer) ListTorrentRef(context.Context, *ListTorrentRefRequest) (*ListTorrentRefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTorrentRef not implemented")
}

func (UnimplementedWebServiceServer) GetTorrentRef(context.Context, *GetTorrentRefRequest) (*GetTorrentRefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTorrentRef not implemented")
}

func (UnimplementedWebServiceServer) GetTorrentRefData(context.Context, *GetTorrentRefDataRequest) (*GetTorrentRefDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTorrentRefData not implemented")
}

func (UnimplementedWebServiceServer) GetTorrentRefMeta(context.Context, *GetTorrentRefMetaRequest) (*GetTorrentRefMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTorrentRefMeta not implemented")
}

func (UnimplementedWebServiceServer) SearchTorrentRef(context.Context, *SearchTorrentRefRequest) (*SearchTorrentRefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTorrentRef not implemented")
}
func (UnimplementedWebServiceServer) mustEmbedUnimplementedWebServiceServer() {}

// UnsafeWebServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebServiceServer will
// result in compilation errors.
type UnsafeWebServiceServer interface {
	mustEmbedUnimplementedWebServiceServer()
}

func RegisterWebServiceServer(s grpc.ServiceRegistrar, srv WebServiceServer) {
	s.RegisterService(&WebService_ServiceDesc, srv)
}

func _WebService_ListTorrentRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTorrentRefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).ListTorrentRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.web.v1.WebService/ListTorrentRef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).ListTorrentRef(ctx, req.(*ListTorrentRefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_GetTorrentRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTorrentRefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).GetTorrentRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.web.v1.WebService/GetTorrentRef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).GetTorrentRef(ctx, req.(*GetTorrentRefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_GetTorrentRefData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTorrentRefDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).GetTorrentRefData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.web.v1.WebService/GetTorrentRefData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).GetTorrentRefData(ctx, req.(*GetTorrentRefDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_GetTorrentRefMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTorrentRefMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).GetTorrentRefMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.web.v1.WebService/GetTorrentRefMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).GetTorrentRefMeta(ctx, req.(*GetTorrentRefMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_SearchTorrentRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTorrentRefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).SearchTorrentRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.web.v1.WebService/SearchTorrentRef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).SearchTorrentRef(ctx, req.(*SearchTorrentRefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebService_ServiceDesc is the grpc.ServiceDesc for WebService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "media.web.v1.WebService",
	HandlerType: (*WebServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTorrentRef",
			Handler:    _WebService_ListTorrentRef_Handler,
		},
		{
			MethodName: "GetTorrentRef",
			Handler:    _WebService_GetTorrentRef_Handler,
		},
		{
			MethodName: "GetTorrentRefData",
			Handler:    _WebService_GetTorrentRefData_Handler,
		},
		{
			MethodName: "GetTorrentRefMeta",
			Handler:    _WebService_GetTorrentRefMeta_Handler,
		},
		{
			MethodName: "SearchTorrentRef",
			Handler:    _WebService_SearchTorrentRef_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "media/web/v1/web_services.proto",
}
