// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: media/scraper/v1/scrape_service.proto

package scraperv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScrapeServiceClient is the client API for ScrapeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScrapeServiceClient interface {
	Scrape(ctx context.Context, in *ScrapeRequest, opts ...grpc.CallOption) (*ScrapeResponse, error)
	State(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateResponse, error)
}

type scrapeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScrapeServiceClient(cc grpc.ClientConnInterface) ScrapeServiceClient {
	return &scrapeServiceClient{cc}
}

func (c *scrapeServiceClient) Scrape(ctx context.Context, in *ScrapeRequest, opts ...grpc.CallOption) (*ScrapeResponse, error) {
	out := new(ScrapeResponse)
	err := c.cc.Invoke(ctx, "/media.scraper.v1.ScrapeService/Scrape", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scrapeServiceClient) State(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateResponse, error) {
	out := new(StateResponse)
	err := c.cc.Invoke(ctx, "/media.scraper.v1.ScrapeService/State", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScrapeServiceServer is the server API for ScrapeService service.
// All implementations must embed UnimplementedScrapeServiceServer
// for forward compatibility
type ScrapeServiceServer interface {
	Scrape(context.Context, *ScrapeRequest) (*ScrapeResponse, error)
	State(context.Context, *StateRequest) (*StateResponse, error)
	mustEmbedUnimplementedScrapeServiceServer()
}

// UnimplementedScrapeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScrapeServiceServer struct{}

func (UnimplementedScrapeServiceServer) Scrape(context.Context, *ScrapeRequest) (*ScrapeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scrape not implemented")
}

func (UnimplementedScrapeServiceServer) State(context.Context, *StateRequest) (*StateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method State not implemented")
}
func (UnimplementedScrapeServiceServer) mustEmbedUnimplementedScrapeServiceServer() {}

// UnsafeScrapeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScrapeServiceServer will
// result in compilation errors.
type UnsafeScrapeServiceServer interface {
	mustEmbedUnimplementedScrapeServiceServer()
}

func RegisterScrapeServiceServer(s grpc.ServiceRegistrar, srv ScrapeServiceServer) {
	s.RegisterService(&ScrapeService_ServiceDesc, srv)
}

func _ScrapeService_Scrape_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScrapeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScrapeServiceServer).Scrape(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.scraper.v1.ScrapeService/Scrape",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScrapeServiceServer).Scrape(ctx, req.(*ScrapeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScrapeService_State_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScrapeServiceServer).State(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.scraper.v1.ScrapeService/State",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScrapeServiceServer).State(ctx, req.(*StateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScrapeService_ServiceDesc is the grpc.ServiceDesc for ScrapeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScrapeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "media.scraper.v1.ScrapeService",
	HandlerType: (*ScrapeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Scrape",
			Handler:    _ScrapeService_Scrape_Handler,
		},
		{
			MethodName: "State",
			Handler:    _ScrapeService_State_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "media/scraper/v1/scrape_service.proto",
}
